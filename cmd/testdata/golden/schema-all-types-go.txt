type Parquet_go_root struct {
Bool bool `parquet:"name=Bool, type=BOOLEAN"`
Int32 int32 `parquet:"name=Int32, type=INT32"`
Int64 int64 `parquet:"name=Int64, type=INT64"`
Int96 string `parquet:"name=Int96, type=INT96"`
Float float32 `parquet:"name=Float, type=FLOAT"`
Double float64 `parquet:"name=Double, type=DOUBLE"`
Bytearray string `parquet:"name=Bytearray, type=BYTE_ARRAY"`
Enum string `parquet:"name=Enum, type=BYTE_ARRAY, convertedtype=ENUM"`
Uuid string `parquet:"name=Uuid, type=BYTE_ARRAY"`
Json string `parquet:"name=Json, type=BYTE_ARRAY, convertedtype=JSON"`
FixedLenByteArray string `parquet:"name=FixedLenByteArray, type=FIXED_LEN_BYTE_ARRAY, length=10"`
Utf8 string `parquet:"name=Utf8, type=BYTE_ARRAY, convertedtype=UTF8"`
Int_8 int32 `parquet:"name=Int_8, type=INT32, convertedtype=INT_8"`
Int_16 int32 `parquet:"name=Int_16, type=INT32, convertedtype=INT_16"`
Int_32 int32 `parquet:"name=Int_32, type=INT32, convertedtype=INT_32"`
Int_64 int64 `parquet:"name=Int_64, type=INT64, convertedtype=INT_64"`
Uint_8 int32 `parquet:"name=Uint_8, type=INT32, convertedtype=UINT_8"`
Uint_16 int32 `parquet:"name=Uint_16, type=INT32, convertedtype=UINT_16"`
Uint_32 int32 `parquet:"name=Uint_32, type=INT32, convertedtype=UINT_32"`
Uint_64 int64 `parquet:"name=Uint_64, type=INT64, convertedtype=UINT_64"`
Date int32 `parquet:"name=Date, type=INT32, convertedtype=DATE"`
Date2 int32 `parquet:"name=Date2, type=INT32, convertedtype=DATE"`
Timemillis int32 `parquet:"name=Timemillis, type=INT32, logicaltype=TIME, logicaltype.isadjustedtoutc=false, logicaltype.unit=MILLIS"`
Timemillis2 int32 `parquet:"name=Timemillis2, type=INT32, logicaltype=TIME, logicaltype.isadjustedtoutc=true, logicaltype.unit=MILLIS"`
Timemicros int64 `parquet:"name=Timemicros, type=INT64, logicaltype=TIME, logicaltype.isadjustedtoutc=false, logicaltype.unit=MICROS"`
Timemicros2 int64 `parquet:"name=Timemicros2, type=INT64, logicaltype=TIME, logicaltype.isadjustedtoutc=false, logicaltype.unit=MICROS"`
Timestampmillis int64 `parquet:"name=Timestampmillis, type=INT64, logicaltype=TIMESTAMP, logicaltype.isadjustedtoutc=false, logicaltype.unit=MILLIS"`
Timestampmillis2 int64 `parquet:"name=Timestampmillis2, type=INT64, logicaltype=TIMESTAMP, logicaltype.isadjustedtoutc=true, logicaltype.unit=MILLIS"`
Timestampmicros int64 `parquet:"name=Timestampmicros, type=INT64, logicaltype=TIMESTAMP, logicaltype.isadjustedtoutc=false, logicaltype.unit=MICROS"`
Timestampmicros2 int64 `parquet:"name=Timestampmicros2, type=INT64, logicaltype=TIMESTAMP, logicaltype.isadjustedtoutc=false, logicaltype.unit=MICROS"`
Interval string `parquet:"name=Interval, type=FIXED_LEN_BYTE_ARRAY, convertedtype=INTERVAL, length=12"`
Decimal1 int32 `parquet:"name=Decimal1, type=INT32, convertedtype=DECIMAL, scale=2, precision=9"`
Decimal2 int64 `parquet:"name=Decimal2, type=INT64, convertedtype=DECIMAL, scale=2, precision=18"`
Decimal3 string `parquet:"name=Decimal3, type=FIXED_LEN_BYTE_ARRAY, convertedtype=DECIMAL, scale=2, precision=10, length=12"`
Decimal4 string `parquet:"name=Decimal4, type=BYTE_ARRAY, convertedtype=DECIMAL, scale=2, precision=20"`
Decimal5 int32 `parquet:"name=Decimal5, type=INT32, logicaltype=DECIMAL, logicaltype.precision=9, logicaltype.scale=2"`
Decimal_pointer *string `parquet:"name=Decimal_pointer, type=FIXED_LEN_BYTE_ARRAY, convertedtype=DECIMAL, scale=2, precision=10, length=12, repetitiontype=OPTIONAL"`
Map map[string]int32 `parquet:"name=Map, type=MAP, keytype=BYTE_ARRAY, keyconvertedtype=UTF8, valuetype=INT32"`
List []string `parquet:"name=List, type=LIST, valuetype=BYTE_ARRAY, valueconvertedtype=UTF8"`
Repeated []int32 `parquet:"name=Repeated, type=INT32, repetitiontype=REPEATED"`
NestedMap map[string]struct {
Map map[string]int32 `parquet:"name=Map, type=MAP, keytype=BYTE_ARRAY, keyconvertedtype=UTF8, valuetype=INT32"`
List []string `parquet:"name=List, type=LIST, valuetype=BYTE_ARRAY, valueconvertedtype=DECIMAL, valuescale=2, valueprecision=10"`
} `parquet:"name=NestedMap, type=MAP, keytype=BYTE_ARRAY, keyconvertedtype=UTF8, valuetype=STRUCT"`
NestedList []struct {
Map map[string]int32 `parquet:"name=Map, type=MAP, keytype=BYTE_ARRAY, keyconvertedtype=UTF8, valuetype=INT32"`
List []string `parquet:"name=List, type=LIST, valuetype=BYTE_ARRAY, valueconvertedtype=DECIMAL, valuescale=2, valueprecision=10"`
} `parquet:"name=NestedList, type=LIST, valuetype=STRUCT"`
}
