type Parquet_go_root struct {
Bool bool `parquet:"name=Bool, type=BOOLEAN, repetitiontype=REQUIRED"`
Int32 int32 `parquet:"name=Int32, type=INT32, repetitiontype=REQUIRED"`
Int64 int64 `parquet:"name=Int64, type=INT64, repetitiontype=REQUIRED"`
Int96 string `parquet:"name=Int96, type=INT96, repetitiontype=REQUIRED"`
Float float32 `parquet:"name=Float, type=FLOAT, repetitiontype=REQUIRED"`
Double float64 `parquet:"name=Double, type=DOUBLE, repetitiontype=REQUIRED"`
Bytearray string `parquet:"name=Bytearray, type=BYTE_ARRAY, repetitiontype=REQUIRED"`
FixedLenByteArray string `parquet:"name=FixedLenByteArray, type=FIXED_LEN_BYTE_ARRAY, length=10, repetitiontype=REQUIRED"`
Utf8 string `parquet:"name=Utf8, type=BYTE_ARRAY, convertedtype=UTF8, repetitiontype=REQUIRED"`
Int_8 int32 `parquet:"name=Int_8, type=INT32, convertedtype=INT_8, repetitiontype=REQUIRED"`
Int_16 int32 `parquet:"name=Int_16, type=INT32, convertedtype=INT_16, repetitiontype=REQUIRED"`
Int_32 int32 `parquet:"name=Int_32, type=INT32, convertedtype=INT_32, repetitiontype=REQUIRED"`
Int_64 int64 `parquet:"name=Int_64, type=INT64, convertedtype=INT_64, repetitiontype=REQUIRED"`
Uint_8 int32 `parquet:"name=Uint_8, type=INT32, convertedtype=UINT_8, repetitiontype=REQUIRED"`
Uint_16 int32 `parquet:"name=Uint_16, type=INT32, convertedtype=UINT_16, repetitiontype=REQUIRED"`
Uint_32 int32 `parquet:"name=Uint_32, type=INT32, convertedtype=UINT_32, repetitiontype=REQUIRED"`
Uint_64 int64 `parquet:"name=Uint_64, type=INT64, convertedtype=UINT_64, repetitiontype=REQUIRED"`
Date int32 `parquet:"name=Date, type=INT32, convertedtype=DATE, repetitiontype=REQUIRED"`
Date2 int32 `parquet:"name=Date2, type=INT32, convertedtype=DATE, repetitiontype=REQUIRED"`
Timemillis int32 `parquet:"name=Timemillis, type=INT32, convertedtype=TIME_MILLIS, repetitiontype=REQUIRED"`
Timemillis2 int32 `parquet:"name=Timemillis2, type=INT32, repetitiontype=REQUIRED"`
Timemicros int64 `parquet:"name=Timemicros, type=INT64, convertedtype=TIME_MICROS, repetitiontype=REQUIRED"`
Timemicros2 int64 `parquet:"name=Timemicros2, type=INT64, repetitiontype=REQUIRED"`
Timestampmillis int64 `parquet:"name=Timestampmillis, type=INT64, convertedtype=TIMESTAMP_MILLIS, repetitiontype=REQUIRED"`
Timestampmillis2 int64 `parquet:"name=Timestampmillis2, type=INT64, repetitiontype=REQUIRED"`
Timestampmicros int64 `parquet:"name=Timestampmicros, type=INT64, convertedtype=TIMESTAMP_MICROS, repetitiontype=REQUIRED"`
Timestampmicros2 int64 `parquet:"name=Timestampmicros2, type=INT64, repetitiontype=REQUIRED"`
Interval string `parquet:"name=Interval, type=FIXED_LEN_BYTE_ARRAY, convertedtype=INTERVAL, repetitiontype=REQUIRED"`
Decimal1 int32 `parquet:"name=Decimal1, type=INT32, convertedtype=INT32, scale=2, precision=9, repetitiontype=REQUIRED"`
Decimal2 int64 `parquet:"name=Decimal2, type=INT64, convertedtype=INT64, scale=2, precision=18, repetitiontype=REQUIRED"`
Decimal3 string `parquet:"name=Decimal3, type=FIXED_LEN_BYTE_ARRAY, convertedtype=DECIMAL, scale=2, precision=10, length=12, repetitiontype=REQUIRED"`
Decimal4 string `parquet:"name=Decimal4, type=BYTE_ARRAY, convertedtype=BYTE_ARRAY, scale=2, precision=20, repetitiontype=REQUIRED"`
Decimal5 int32 `parquet:"name=Decimal5, type=INT32, repetitiontype=REQUIRED"`
Decimal_pointer *string `parquet:"name=Decimal_pointer, type=FIXED_LEN_BYTE_ARRAY, convertedtype=DECIMAL, scale=2, precision=10, length=12, repetitiontype=OPTIONAL"`
Map map[string]int32 `parquet:"name=Map, type=MAP, repetitiontype=REQUIRED, keytype=BYTE_ARRAY, valuetype=INT32"`
List []string `parquet:"name=List, type=LIST, repetitiontype=REQUIRED, valuetype=BYTE_ARRAY"`
Repeated []int32 `parquet:"name=Repeated, type=INT32, repetitiontype=REPEATED"`
NestedMap map[string]struct {
Map map[string]int32 `parquet:"name=Map, type=MAP, repetitiontype=REQUIRED, keytype=BYTE_ARRAY, valuetype=INT32"`
List []string `parquet:"name=List, type=LIST, repetitiontype=REQUIRED, valuetype=BYTE_ARRAY"`
} `parquet:"name=NestedMap, type=MAP, repetitiontype=REQUIRED, keytype=BYTE_ARRAY, valuetype=STRUCT"`
NestedList []struct {
Map map[string]string `parquet:"name=Map, type=MAP, repetitiontype=REQUIRED, keytype=BYTE_ARRAY, valuetype=BYTE_ARRAY"`
List []int32 `parquet:"name=List, type=LIST, repetitiontype=REQUIRED, valuetype=INT32"`
} `parquet:"name=NestedList, type=LIST, repetitiontype=REQUIRED, valuetype=STRUCT"`
}
